<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Copy 47 elements to &apos;AbstractSyntaxTree/src/cop5555sp15.ast&apos;&#x0A;- Original project: &apos;AbstractSyntaxTree&apos;&#x0A;- Destination element: &apos;AbstractSyntaxTree/src/cop5555sp15.ast&apos;&#x0A;- Original elements:&#x0A;     cop5555sp15.LValue.java&#x0A;     cop5555sp15.Type.java&#x0A;     cop5555sp15.Program.java&#x0A;     cop5555sp15.ListOrMapElemExpression.java&#x0A;     cop5555sp15.Closure.java&#x0A;     cop5555sp15.Expression.java&#x0A;     cop5555sp15.KeyExpression.java&#x0A;     cop5555sp15.ASTNode.java&#x0A;     cop5555sp15.TestParser.java&#x0A;     cop5555sp15.ClosureEvalExpression.java&#x0A;     cop5555sp15.WhileStatement.java&#x0A;     cop5555sp15.IfElseStatement.java&#x0A;     cop5555sp15.MapListExpression.java&#x0A;     cop5555sp15.IdentLValue.java&#x0A;     cop5555sp15.ListExpression.java&#x0A;     cop5555sp15.ClosureDec.java&#x0A;     cop5555sp15.AssignmentStatement.java&#x0A;     cop5555sp15.Statement.java&#x0A;     cop5555sp15.IdentExpression.java&#x0A;     cop5555sp15.BinaryExpression.java&#x0A;     cop5555sp15.KeyValueExpression.java&#x0A;     cop5555sp15.ListType.java&#x0A;     cop5555sp15.PrintStatement.java&#x0A;     cop5555sp15.ToStringVisitor.java&#x0A;     cop5555sp15.BlockElem.java&#x0A;     cop5555sp15.WhileRangeStatement.java&#x0A;     cop5555sp15.SimpleType.java&#x0A;     cop5555sp15.RangeExpression.java&#x0A;     cop5555sp15.QualifiedName.java&#x0A;     cop5555sp15.ValueExpression.java&#x0A;     cop5555sp15.BooleanLitExpression.java&#x0A;     cop5555sp15.SizeExpression.java&#x0A;     cop5555sp15.WhileStarStatement.java&#x0A;     cop5555sp15.TestParserErrorHandling.java&#x0A;     cop5555sp15.Block.java&#x0A;     cop5555sp15.ExpressionStatement.java&#x0A;     cop5555sp15.ASTVisitor.java&#x0A;     cop5555sp15.VarDec.java&#x0A;     cop5555sp15.IfStatement.java&#x0A;     cop5555sp15.ExpressionLValue.java&#x0A;     cop5555sp15.ClosureExpression.java&#x0A;     cop5555sp15.KeyValueType.java&#x0A;     cop5555sp15.IntLitExpression.java&#x0A;     cop5555sp15.package-info.java&#x0A;     cop5555sp15.UnaryExpression.java&#x0A;     cop5555sp15.StringLitExpression.java&#x0A;     cop5555sp15.ReturnStatement.java" description="Copy compilation units" destination="/src&lt;cop5555sp15.ast" element1="/src&lt;cop5555sp15{LValue.java" element10="/src&lt;cop5555sp15{ClosureEvalExpression.java" element11="/src&lt;cop5555sp15{WhileStatement.java" element12="/src&lt;cop5555sp15{IfElseStatement.java" element13="/src&lt;cop5555sp15{MapListExpression.java" element14="/src&lt;cop5555sp15{IdentLValue.java" element15="/src&lt;cop5555sp15{ListExpression.java" element16="/src&lt;cop5555sp15{ClosureDec.java" element17="/src&lt;cop5555sp15{AssignmentStatement.java" element18="/src&lt;cop5555sp15{Statement.java" element19="/src&lt;cop5555sp15{IdentExpression.java" element2="/src&lt;cop5555sp15{Type.java" element20="/src&lt;cop5555sp15{BinaryExpression.java" element21="/src&lt;cop5555sp15{KeyValueExpression.java" element22="/src&lt;cop5555sp15{ListType.java" element23="/src&lt;cop5555sp15{PrintStatement.java" element24="/src&lt;cop5555sp15{ToStringVisitor.java" element25="/src&lt;cop5555sp15{BlockElem.java" element26="/src&lt;cop5555sp15{WhileRangeStatement.java" element27="/src&lt;cop5555sp15{SimpleType.java" element28="/src&lt;cop5555sp15{RangeExpression.java" element29="/src&lt;cop5555sp15{QualifiedName.java" element3="/src&lt;cop5555sp15{Program.java" element30="/src&lt;cop5555sp15{ValueExpression.java" element31="/src&lt;cop5555sp15{BooleanLitExpression.java" element32="/src&lt;cop5555sp15{SizeExpression.java" element33="/src&lt;cop5555sp15{WhileStarStatement.java" element34="/src&lt;cop5555sp15{TestParserErrorHandling.java" element35="/src&lt;cop5555sp15{Block.java" element36="/src&lt;cop5555sp15{ExpressionStatement.java" element37="/src&lt;cop5555sp15{ASTVisitor.java" element38="/src&lt;cop5555sp15{VarDec.java" element39="/src&lt;cop5555sp15{IfStatement.java" element4="/src&lt;cop5555sp15{ListOrMapElemExpression.java" element40="/src&lt;cop5555sp15{ExpressionLValue.java" element41="/src&lt;cop5555sp15{ClosureExpression.java" element42="/src&lt;cop5555sp15{KeyValueType.java" element43="/src&lt;cop5555sp15{IntLitExpression.java" element44="/src&lt;cop5555sp15{package-info.java" element45="/src&lt;cop5555sp15{UnaryExpression.java" element46="/src&lt;cop5555sp15{StringLitExpression.java" element47="/src&lt;cop5555sp15{ReturnStatement.java" element5="/src&lt;cop5555sp15{Closure.java" element6="/src&lt;cop5555sp15{Expression.java" element7="/src&lt;cop5555sp15{KeyExpression.java" element8="/src&lt;cop5555sp15{ASTNode.java" element9="/src&lt;cop5555sp15{TestParser.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.copy" policy="org.eclipse.jdt.ui.copyResources" stamp="1424895492705" units="47" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete 47 elements from project &apos;AbstractSyntaxTree&apos;&#x0A;- Original project: &apos;AbstractSyntaxTree&apos;&#x0A;- Original elements:&#x0A;     cop5555sp15.AssignmentStatement.java&#x0A;     cop5555sp15.ASTNode.java&#x0A;     cop5555sp15.ASTVisitor.java&#x0A;     cop5555sp15.BinaryExpression.java&#x0A;     cop5555sp15.Block.java&#x0A;     cop5555sp15.BlockElem.java&#x0A;     cop5555sp15.BooleanLitExpression.java&#x0A;     cop5555sp15.Closure.java&#x0A;     cop5555sp15.ClosureDec.java&#x0A;     cop5555sp15.ClosureEvalExpression.java&#x0A;     cop5555sp15.ClosureExpression.java&#x0A;     cop5555sp15.Expression.java&#x0A;     cop5555sp15.ExpressionLValue.java&#x0A;     cop5555sp15.ExpressionStatement.java&#x0A;     cop5555sp15.IdentExpression.java&#x0A;     cop5555sp15.IdentLValue.java&#x0A;     cop5555sp15.IfElseStatement.java&#x0A;     cop5555sp15.IfStatement.java&#x0A;     cop5555sp15.IntLitExpression.java&#x0A;     cop5555sp15.KeyExpression.java&#x0A;     cop5555sp15.KeyValueExpression.java&#x0A;     cop5555sp15.KeyValueType.java&#x0A;     cop5555sp15.ListExpression.java&#x0A;     cop5555sp15.ListOrMapElemExpression.java&#x0A;     cop5555sp15.ListType.java&#x0A;     cop5555sp15.LValue.java&#x0A;     cop5555sp15.MapListExpression.java&#x0A;     cop5555sp15.package-info.java&#x0A;     cop5555sp15.PrintStatement.java&#x0A;     cop5555sp15.Program.java&#x0A;     cop5555sp15.QualifiedName.java&#x0A;     cop5555sp15.RangeExpression.java&#x0A;     cop5555sp15.ReturnStatement.java&#x0A;     cop5555sp15.SimpleType.java&#x0A;     cop5555sp15.SizeExpression.java&#x0A;     cop5555sp15.Statement.java&#x0A;     cop5555sp15.StringLitExpression.java&#x0A;     cop5555sp15.TestParser.java&#x0A;     cop5555sp15.TestParserErrorHandling.java&#x0A;     cop5555sp15.ToStringVisitor.java&#x0A;     cop5555sp15.Type.java&#x0A;     cop5555sp15.UnaryExpression.java&#x0A;     cop5555sp15.ValueExpression.java&#x0A;     cop5555sp15.VarDec.java&#x0A;     cop5555sp15.WhileRangeStatement.java&#x0A;     cop5555sp15.WhileStarStatement.java&#x0A;     cop5555sp15.WhileStatement.java" description="Delete elements" element1="/src&lt;cop5555sp15{LValue.java" element10="/src&lt;cop5555sp15{ClosureEvalExpression.java" element11="/src&lt;cop5555sp15{WhileStatement.java" element12="/src&lt;cop5555sp15{IfElseStatement.java" element13="/src&lt;cop5555sp15{MapListExpression.java" element14="/src&lt;cop5555sp15{IdentLValue.java" element15="/src&lt;cop5555sp15{ListExpression.java" element16="/src&lt;cop5555sp15{ClosureDec.java" element17="/src&lt;cop5555sp15{AssignmentStatement.java" element18="/src&lt;cop5555sp15{Statement.java" element19="/src&lt;cop5555sp15{IdentExpression.java" element2="/src&lt;cop5555sp15{Type.java" element20="/src&lt;cop5555sp15{BinaryExpression.java" element21="/src&lt;cop5555sp15{KeyValueExpression.java" element22="/src&lt;cop5555sp15{ListType.java" element23="/src&lt;cop5555sp15{PrintStatement.java" element24="/src&lt;cop5555sp15{ToStringVisitor.java" element25="/src&lt;cop5555sp15{BlockElem.java" element26="/src&lt;cop5555sp15{WhileRangeStatement.java" element27="/src&lt;cop5555sp15{SimpleType.java" element28="/src&lt;cop5555sp15{RangeExpression.java" element29="/src&lt;cop5555sp15{QualifiedName.java" element3="/src&lt;cop5555sp15{Program.java" element30="/src&lt;cop5555sp15{ValueExpression.java" element31="/src&lt;cop5555sp15{BooleanLitExpression.java" element32="/src&lt;cop5555sp15{SizeExpression.java" element33="/src&lt;cop5555sp15{WhileStarStatement.java" element34="/src&lt;cop5555sp15{TestParserErrorHandling.java" element35="/src&lt;cop5555sp15{Block.java" element36="/src&lt;cop5555sp15{ExpressionStatement.java" element37="/src&lt;cop5555sp15{ASTVisitor.java" element38="/src&lt;cop5555sp15{VarDec.java" element39="/src&lt;cop5555sp15{IfStatement.java" element4="/src&lt;cop5555sp15{ListOrMapElemExpression.java" element40="/src&lt;cop5555sp15{ExpressionLValue.java" element41="/src&lt;cop5555sp15{ClosureExpression.java" element42="/src&lt;cop5555sp15{KeyValueType.java" element43="/src&lt;cop5555sp15{IntLitExpression.java" element44="/src&lt;cop5555sp15{package-info.java" element45="/src&lt;cop5555sp15{UnaryExpression.java" element46="/src&lt;cop5555sp15{StringLitExpression.java" element47="/src&lt;cop5555sp15{ReturnStatement.java" element5="/src&lt;cop5555sp15{Closure.java" element6="/src&lt;cop5555sp15{Expression.java" element7="/src&lt;cop5555sp15{KeyExpression.java" element8="/src&lt;cop5555sp15{ASTNode.java" element9="/src&lt;cop5555sp15{TestParser.java" elements="47" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1424895512289" subPackages="false" version="1.0"/>&#x0A;<refactoring comment="Rename type &apos;cop5555sp15.SimpleParser&apos; to &apos;Parser&apos;&#x0A;- Original project: &apos;AbstractSyntaxTree&apos;&#x0A;- Original element: &apos;cop5555sp15.SimpleParser&apos;&#x0A;- Renamed element: &apos;cop5555sp15.Parser&apos;&#x0A;- Update references to refactored element&#x0A;- Update textual occurrences in comments and strings" description="Rename type &apos;SimpleParser&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.type" input="/src&lt;cop5555sp15{SimpleParser.java[SimpleParser" matchStrategy="1" name="Parser" qualified="false" references="true" similarDeclarations="false" stamp="1424895712053" textual="false" version="1.0"/>
</session>