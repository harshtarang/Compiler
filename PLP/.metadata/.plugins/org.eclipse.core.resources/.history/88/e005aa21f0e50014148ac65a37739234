package cop5555sp15.ast;

import cop5555sp15.TokenStream.Kind;
import cop5555sp15.TypeConstants;
import cop5555sp15.symbolTable.SymbolTable;

public class TypeCheckVisitor implements ASTVisitor, TypeConstants {

	@SuppressWarnings("serial")
	public static class TypeCheckException extends Exception {
		ASTNode node;

		public TypeCheckException(String message, ASTNode node) {
			super(node.firstToken.lineNumber + ":" + message);
			this.node = node;
		}
	}

	SymbolTable symbolTable;

	public TypeCheckVisitor(SymbolTable symbolTable) {
		this.symbolTable = symbolTable;
	}

	boolean check(boolean condition, String message, ASTNode node)
			throws TypeCheckException {
		if (condition)
			return true;
		throw new TypeCheckException(message, node);
	}

	/**
	 * Ensure that types on left and right hand side are compatible.
	 */
	@Override
	public Object visitAssignmentStatement(AssignmentStatement assignmentStatement, Object arg)	throws Exception
	{
		
		
		assignmentStatement.lvalue.visit(this, arg);
		assignmentStatement.expression.visit(this, arg);
		check((assignmentStatement.lvalue.getType()==assignmentStatement.expression.getType()),"Incompatible types in assignment",assignmentStatement);
		assignmentStatement.lvalue.setType(assignmentStatement.expression.expressionType);
		return null;
		
		//throw new UnsupportedOperationException("not yet implemented");
	}

	/**
	 * Ensure that both types are the same, save and return the result type
	 */
	@Override
	public Object visitBinaryExpression(BinaryExpression binaryExpression,Object arg) throws Exception 
	{
		binaryExpression.expression0.visit(this, arg);
		binaryExpression.expression1.visit(this, arg);
		check(binaryExpression.expression0.expressionType==binaryExpression.expression1.expressionType,"Expression types are different",binaryExpression);
		binaryExpression.setType(binaryExpression.expression0.expressionType);
		if(binaryExpression.op.kind.equals(Kind.EQUAL) || binaryExpression.op.kind.equals(Kind.NOTEQUAL) || binaryExpression.op.kind.equals(Kind.LE) || binaryExpression.op.kind.equals(Kind.GE) || binaryExpression.op.kind.equals(Kind.LT) || binaryExpression.op.kind.equals(Kind.GT))
			binaryExpression.setType(booleanType);
		else binaryExpression.setType(binaryExpression.expression0.expressionType);
		if(binaryExpression.op.kind.equals(Kind.AND) || binaryExpression.op.kind.equals(Kind.BAR))
			check(binaryExpression.expression0.expressionType==booleanType,"Boolean values expected",binaryExpression);
		
		
			
		return binaryExpression.expression0.expressionType;
		//throw new UnsupportedOperationException("not yet implemented");
	}

	/**
	 * Blocks define scopes. Check that the scope nesting level is the same at
	 * the end as at the beginning of block
	 */
	@Override
	public Object visitBlock(Block block, Object arg) throws Exception {
		int numScopes = symbolTable.enterScope();
		// visit children
		for (BlockElem elem : block.elems) {
			elem.visit(this, arg);
		}
		int numScopesExit = symbolTable.leaveScope();
		check(numScopesExit > 0 && numScopesExit == numScopes,
				"unbalanced scopes", block);
		return null;
	}

	/**
	 * Sets the expressionType to booleanType and returns it
	 * 
	 * @param booleanLitExpression
	 * @param arg
	 * @return
	 * @throws Exception
	 */
	@Override
	public Object visitBooleanLitExpression(BooleanLitExpression booleanLitExpression, Object arg) throws Exception 
	{
		booleanLitExpression.setType(booleanType);
		return booleanType;
		//throw new UnsupportedOperationException("not yet implemented");
	}

	/**
	 * A closure defines a new scope Visit all the declarations in the
	 * formalArgList, and all the statements in the statementList construct and
	 * set the JVMType, the argType array, and the result type
	 * 
	 * @param closure
	 * @param arg
	 * @return
	 * @throws Exception
	 */
	@Override
	public Object visitClosure(Closure closure, Object arg) throws Exception 
	{
		throw new UnsupportedOperationException("not yet implemented");
	}

	/**
	 * Make sure that the name has not already been declared and insert in
	 * symbol table. Visit the closure
	 */
	@Override
	public Object visitClosureDec(ClosureDec closureDec, Object arg) 
	{
		throw new UnsupportedOperationException("not yet implemented");
	}

	/**
	 * Check that the given name is declared as a closure Check the argument
	 * types The type is the return type of the closure
	 */
	@Override
	public Object visitClosureEvalExpression(ClosureEvalExpression closureExpression, Object arg) throws Exception 
	{
		throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitClosureExpression(ClosureExpression closureExpression,
			Object arg) throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitExpressionLValue(ExpressionLValue expressionLValue,
			Object arg) throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitExpressionStatement(
			ExpressionStatement expressionStatement, Object arg)
			throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	/**
	 * Check that name has been declared in scope Get its type from the
	 * declaration.
	 * 
	 */
	@Override
	public Object visitIdentExpression(IdentExpression identExpression,Object arg) throws Exception 
	{
		String ident =identExpression.identToken.getText();
		Declaration dec=(VarDec)symbolTable.lookup(ident);
		String type=null;
		if(dec==null)
			throw new TypeCheckException("Variable "+ ident +" not delcared", identExpression);
		if(dec instanceof VarDec)
		{
			VarDec varDec = (VarDec)dec;
			type=varDec.type.getJVMType();
			identExpression.setType(type);
		}
		return type;
		//throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitIdentLValue(IdentLValue identLValue, Object arg) throws Exception 
	{
		String ident=identLValue.identToken.getText();
		VarDec dec=(VarDec)symbolTable.lookup(ident);
		
		check((dec!=null),"Variable "+ident+" not declared",identLValue);
		//dec.visit(this, arg);
		identLValue.setType(dec.type.getJVMType());
		
		
		return identLValue.identToken.getText();
	}

	@Override
	public Object visitIfElseStatement(IfElseStatement ifElseStatement, Object arg) throws Exception 
	{
		ifElseStatement.expression.visit(this, arg);
		ifElseStatement.ifBlock.visit(this, arg);
		ifElseStatement.elseBlock.visit(this, arg);
		
		if(!ifElseStatement.expression.expressionType.equals(booleanType))
			throw new TypeCheckException("Invalid expression in If-Else", ifElseStatement);
		return null;
	}

	/**
	 * expression type is boolean
	 */
	@Override
	public Object visitIfStatement(IfStatement ifStatement, Object arg) throws Exception 
	{
		
		
		ifStatement.expression.visit(this, arg);
		ifStatement.block.visit(this, arg);
		if(!ifStatement.expression.expressionType.equals(booleanType))
			throw new TypeCheckException("Invalid if statement", ifStatement);
		
		return null;
		
		//throw new UnsupportedOperationException("not yet implemented");
	}

	/**
	 * expression type is int
	 */
	@Override
	public Object visitIntLitExpression(IntLitExpression intLitExpression,Object arg) throws Exception 
	{
		intLitExpression.setType(intType);
		return intType;
	}

	@Override
	public Object visitKeyExpression(KeyExpression keyExpression, Object arg)
			throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitKeyValueExpression(
			KeyValueExpression keyValueExpression, Object arg) throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitKeyValueType(KeyValueType keyValueType, Object arg)
			throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	// visit the expressions (children) and ensure they are the same type
	// the return type is "Ljava/util/ArrayList<"+type0+">;" where type0 is the
	// type of elements in the list
	// this should handle lists of lists, and empty list. An empty list is
	// indicated by "Ljava/util/ArrayList;".
	@Override
	public Object visitListExpression(ListExpression listExpression, Object arg) throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	/** gets the type from the enclosed expression */
	@Override
	public Object visitListOrMapElemExpression(
			ListOrMapElemExpression listOrMapElemExpression, Object arg)
			throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitListType(ListType listType, Object arg) throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitMapListExpression(MapListExpression mapListExpression,
			Object arg) throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitPrintStatement(PrintStatement printStatement, Object arg)
			throws Exception {
		printStatement.expression.visit(this, null);
		return null;
	}

	@Override
	public Object visitProgram(Program program, Object arg) throws Exception {
		if (arg == null) {
			program.JVMName = program.name;
		} else {
			program.JVMName = arg + "/" + program.name;
		}
		// ignore the import statement
		if (!symbolTable.insert(program.name, null)) {
			throw new TypeCheckException("name already in symbol table",
					program);
		}
		program.block.visit(this, true);
		return null;
	}

	@Override
	public Object visitQualifiedName(QualifiedName qualifiedName, Object arg) {
		throw new UnsupportedOperationException();
	}

	/**
	 * Checks that both expressions have type int.
	 * 
	 * Note that in spite of the name, this is not in the Expression type
	 * hierarchy.
	 */
	@Override
	public Object visitRangeExpression(RangeExpression rangeExpression,
			Object arg) throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	// nothing to do here
	@Override
	public Object visitReturnStatement(ReturnStatement returnStatement,
			Object arg) throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitSimpleType(SimpleType simpleType, Object arg)
			throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	@Override
	public Object visitSizeExpression(SizeExpression sizeExpression, Object arg) throws Exception 
	{
		sizeExpression.expression.visit(this, arg);
		
		if(!((sizeExpression.expression.expressionType.startsWith(emptyList)) || (sizeExpression.expression.expressionType.startsWith(emptyMap))))
			throw new TypeCheckException("Expression in size is neither of type Map nor list", sizeExpression);
		
		return null;
	}

	@Override
	public Object visitStringLitExpression(
			StringLitExpression stringLitExpression, Object arg)
			throws Exception {
		stringLitExpression.setType(stringType);;
		return stringType;
		
		//throw new UnsupportedOperationException("not yet implemented");
	}

	/**
	 * if ! and boolean, then boolean else if - and int, then int else error
	 */
	@Override
	public Object visitUnaryExpression(UnaryExpression unaryExpression,Object arg) throws Exception 
	{
		String type=null;
		unaryExpression.expression.visit(this, arg);
		if(unaryExpression.op.kind.equals(Kind.NOT) && unaryExpression.expression.expressionType.equals(booleanType))
		{
			type=booleanType;
			unaryExpression.setType(booleanType);
		}
		else if(unaryExpression.op.kind.equals(Kind.MINUS) && unaryExpression.expression.expressionType.equals(intType))
		{
			type=intType;
			unaryExpression.setType(intType);
			
		}
		
		else
			throw new TypeCheckException("Invalid Unary Expression", unaryExpression);
			
		return type;
	}

	@Override
	public Object visitUndeclaredType(UndeclaredType undeclaredType, Object arg)
			throws Exception {
		throw new UnsupportedOperationException(
				"undeclared types not supported");
	}

	@Override
	public Object visitValueExpression(ValueExpression valueExpression,
			Object arg) throws Exception {
		throw new UnsupportedOperationException("not yet implemented");
	}

	/**
	 * check that this variable has not already been declared in the same scope.
	 */
	@Override
	public Object visitVarDec(VarDec varDec, Object arg) throws Exception 
	{
		String ident=varDec.identToken.getText();
		if(symbolTable.lookup(ident)==null)
		{
			symbolTable.insert(ident, varDec);
		}
		else 
			throw new TypeCheckException("Re-declaration of variable: "+ident, varDec);
		
		return varDec.type;
		//	throw new UnsupportedOperationException("not yet implemented");
	}

	/**
	 * All checking will be done in the children since grammar ensures that the
	 * rangeExpression is a rangeExpression.
	 */
	@Override
	public Object visitWhileRangeStatement(WhileRangeStatement whileRangeStatement, Object arg) throws Exception 
	{
		whileRangeStatement.rangeExpression.visit(this, arg);
		whileRangeStatement.block.visit(this, arg);
		
		return null;

	}

	@Override
	public Object visitWhileStarStatement(WhileStarStatement whileStarStatement, Object arg) throws Exception {

		whileStarStatement.expression.visit(this, arg);
		
		if(!whileStarStatement.expression.expressionType.equals(booleanType))
			throw new TypeCheckException("The expression in while loop is not boolean", whileStarStatement);
		
		whileStarStatement.block.visit(this, arg);

		return null;
	}

	@Override
	public Object visitWhileStatement(WhileStatement whileStatement, Object arg) throws Exception 
	{
		whileStatement.expression.visit(this, arg);
		
		if(!whileStatement.expression.expressionType.equals(booleanType))
			throw new TypeCheckException("The expression in while loop is not boolean", whileStatement);
		
		whileStatement.block.visit(this, arg);
		
		return null;
	}

}
