package cop5555sp15;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;
import cop5555sp15.ast.ASTNode;
import cop5555sp15.ast.CodeGenVisitor;
import cop5555sp15.ast.Program;
import cop5555sp15.ast.TypeCheckVisitor;
import cop5555sp15.ast.TypeCheckVisitor.TypeCheckException;
import cop5555sp15.symbolTable.SymbolTable;

public class MyTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String input = "class A {\n print 3; \n}";
		System.out.println(input);
		Program program = (Program) parseCorrectInput(input);
		
		typeCheckCorrectAST(program);
		byte[] bytecode = generateByteCode(program);
		
		System.out.println("\nexecuting bytecode:");
		executeByteCode(program.JVMName, bytecode);
	}
	
	
	private static ASTNode parseCorrectInput(String input) {
		TokenStream stream = new TokenStream(input);
		Scanner scanner = new Scanner(stream);
		scanner.scan();
		Parser parser = new Parser(stream);
		System.out.println();
		ASTNode ast = parser.parse();
		if (ast == null) {
			System.out.println("errors " + parser.getErrors());
		}
		assertNotNull(ast);
		return ast;
	}
	
	
	private static ASTNode typeCheckCorrectAST(ASTNode ast) throws Exception {
		SymbolTable symbolTable = new SymbolTable();
		TypeCheckVisitor v = new TypeCheckVisitor(symbolTable);
		try {
			ast.visit(v, null);
		} catch (TypeCheckException e) {
			System.out.println(e.getMessage());
			fail("no errors expected");
		}
		return ast;
	}
	
	
	private static byte[] generateByteCode(ASTNode ast) throws Exception {
		CodeGenVisitor v = new CodeGenVisitor();
			byte[] bytecode = (byte[]) ast.visit(v, null);
			dumpBytecode(bytecode);
			return bytecode;
	}

}
